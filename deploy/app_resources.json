{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.16.1.55165",
      "templateHash": "3491887421267101705"
    }
  },
  "parameters": {
    "managedDomainName": {
      "type": "string",
      "metadata": {
        "description": "Last segment of name of email service domain"
      },
      "defaultValue": "AzureManagedDomain"
    },
    "dbUserPassword": {
      // Remove this eventually!
      "type": "securestring",
      "metadata": {
        "description": "Password used by app"
      }
    },
    "dbName": {
      "type": "string",
      "metadata": {
        "description": "Name of database"
      }
    },
    "dbServerName": {
      "type": "string",
      "metadata": {
        "description": "Server Name for Azure database for PostgreSQL Flexible Server"
      }
    },
    "dbAdmin": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Database administrator login name"
      }
    },
    "dbAdminPw": {
      "type": "securestring",
      "minLength": 8,
      "metadata": {
        "description": "Database administrator password"
      }
    },
    "db_skutier": {
      "type": "string",
      "defaultValue": "GeneralPurpose",
      "allowedValues": [
        "Basic",
        "GeneralPurpose",
        "MemoryOptimized",
        "Burstable"
      ],
      "metadata": {
        "description": "Azure database for PostgreSQL pricing tier"
      }
    },
    "db_skuname": {
      "type": "string",
      "defaultValue": "Standard_D2ds_v4",
      "metadata": {
        "description": "Azure database for PostgreSQL Flexible Server sku name "
      }
    },
    "storageSize": {
      "type": "int",
      "defaultValue": 32,
      "metadata": {
        "description": "Azure database for PostgreSQL Flexible Server Storage Size in GB "
      }
    },
    "postgresqlVersion": {
      "type": "string",
      "defaultValue": "14",
      "allowedValues": [
        "11",
        "12",
        "13",
        "14",
        "15"
      ],
      "metadata": {
        "description": "PostgreSQL version"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "backupRetentionDays": {
      "type": "int",
      "defaultValue": 7,
      "metadata": {
        "description": "PostgreSQL Flexible Server backup retention days"
      }
    },
    "geoRedundantBackup": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "Geo-Redundant Backup setting"
      }
    },
    "haMode": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "ZoneRedundant",
        "SameZone"
      ],
      "metadata": {
        "description": "High Availability Mode"
      }
    },
    "isActiveDirectoryAuthEnabled": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "Active Directory Authetication"
      }
    },
    "isPostgreSQLAuthEnabled": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "PostgreSQL Authetication"
      }
    },
    "aadAdminObjectid": {
      "type": "string",
      "metadata": {
        "description": "The Object ID of the Azure AD admin."
      }
    },
    "aadAdminName": {
      "type": "string",
      "metadata": {
        "description": "Azure AD admin name."
      }
    },
    "aadAdminType": {
      "type": "string",
      "defaultValue": "ServicePrincipal",
      "allowedValues": [
        "User",
        "Group",
        "ServicePrincipal"
      ],
      "metadata": {
        "description": "Azure AD admin Type"
      }
    },
    "commServiceName": {
      "type": "string",
      "metadata": {
        "description": "Name of Azure communication service"
      }
    },
    "emailServiceName": {
      "type": "string",
      "metadata": {
        "description": "Name of Azure email communication service"
      }
    },
    "managedIdentityName": {
      "type": "string",
      "metadata": {
        "description": "Name of Azure managed identity"
      }
    },
    "functionAppName": {
      "type": "string",
      "defaultValue": "[format('func-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "The name of the Azure Function app."
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    },
    "functionWorkerRuntime": {
      "type": "string",
      "allowedValues": [
        "dotnet",
        "node",
        "python",
        "java"
      ],
      "metadata": {
        "description": "The language worker runtime to load in the function app."
      }
    },
    "linuxFxVersion": {
      "type": "string",
      "metadata": {
        "description": "Required for Linux app to represent runtime stack in the format of 'runtime|runtimeVersion'. For example: 'python|3.9'"
      }
    },
    "homeIpAddress": {
      "type": "string",
      "metadata": {
        "description": "Required to interact with postgres server while developing"
      }
    }
  },
  "variables": {
    "applicationInsightsName": "[parameters('functionAppName')]",
    "storageAccountName": "[format('appstorage{0}', uniqueString(resourceGroup().id))]",
    "managedDomainName": "[concat(parameters('emailServiceName'), '/', parameters('managedDomainName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers",
      "apiVersion": "2022-12-01",
      "name": "[parameters('dbServerName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('db_skuName')]",
        "tier": "[parameters('db_skutier')]"
      },
      "resources": [
        {
          "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
          "apiVersion": "2023-03-01-preview",
          "name": "[format('{0}/{1}', parameters('dbServerName'), parameters('dbName'))]",
          "dependsOn": [
            "[parameters('dbServerName')]"
          ]
        },
        {
          "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
          "apiVersion": "2023-03-01-preview",
          "name": "[concat(parameters('dbServerName'),'/homeIpRule')]",
          "properties": {
            "endIpAddress": "[parameters('homeIpAddress')]",
            "startIpAddress": "[parameters('homeIpAddress')]"
          },
          "dependsOn": [
            "[parameters('dbServerName')]"
          ]
        },
        {
          "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
          "apiVersion": "2023-03-01-preview",
          "name": "[concat(parameters('dbServerName'),'/allowAllAzure')]",
          "properties": {
            "endIpAddress": "0.0.0.0",
            "startIpAddress": "0.0.0.0"
          },
          "dependsOn": [
            "[parameters('dbServerName')]"
          ]
        }
      ],
      "properties": {
        "createMode": "Default",
        "version": "[parameters('postgresqlVersion')]",
        "administratorLogin": "[parameters('dbAdmin')]",
        "administratorLoginPassword": "[parameters('dbAdminPw')]",
        "authConfig": {
          "activeDirectoryAuth": "[parameters('isActiveDirectoryAuthEnabled')]",
          "passwordAuth": "[parameters('isPostgreSQLAuthEnabled')]",
          "tenantId": "[subscription().tenantId]"
        },
        "storage": {
          "storageSizeGB": "[parameters('storageSize')]"
        },
        "backup": {
          "backupRetentionDays": "[parameters('backupRetentionDays')]",
          "geoRedundantBackup": "[parameters('geoRedundantBackup')]"
        },
        "highAvailability": {
          "mode": "[parameters('haMode')]"
        }
      }
    },
    {
      "type": "Microsoft.Communication/communicationServices",
      "apiVersion": "2023-04-01-preview",
      "name": "[parameters('commServiceName')]",
      "location": "global",
      "properties": {
        "dataLocation": "europe",
        "linkedDomains": [
          "[resourceId('Microsoft.Communication/emailServices/domains', parameters('emailServiceName'), parameters('managedDomainName'))]"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Communication/emailServices/domains', parameters('emailServiceName'), parameters('managedDomainName'))]"
      ]
    },
    {
      "type": "Microsoft.Communication/emailServices",
      "apiVersion": "2023-04-01-preview",
      "name": "[parameters('emailServiceName')]",
      "location": "global",
      "properties": {
        "dataLocation": "europe"
      },
      "resources": [
        {
          "type": "Microsoft.Communication/emailServices/domains",
          "apiVersion": "2022-07-01-preview",
          "name": "[variables('managedDomainName')]",
          "location": "global",
          "properties": {
            "domainManagement": "AzureManaged",
            "userEngagementTracking": "Disabled",
            "validSenderUsernames": {}
          },
          "dependsOn": [
            "[parameters('emailServiceName')]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[variables('storageAccountName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "[parameters('storageAccountType')]"
      },
      "kind": "Storage"
    },
    //Not needed for consumption plan
    /*{
        "type": "Microsoft.Web/serverfarms",
       },*/
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "Application_Type": "web"
      },
      "kind": "web"
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[parameters('functionAppName')]",
      "location": "[resourceGroup().location]",
      "kind": "functionapp,linux",
      "properties": {
        "reserved": true,
        //"serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('functionAppName')), '2020-02-02').InstrumentationKey]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-05-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-05-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(parameters('functionAppName'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "[parameters('functionWorkerRuntime')]"
            },
            /*{
                            "name": "WEBSITE_RUN_FROM_PACKAGE",
                            "value": ""
                        },*/

            //subsequent (and absence of previous) item enables remote build
            {
              "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
              "value": "true"
            },
            /*
                                   {
                                       "name": "ENABLE_ORYX_BUILD=true",
                                       "value": "true"
                                   }*/

            // environment variables for app
            {
              "name": "DB_SERVER_NAME",
              "value": "[parameters('dbServerName')]"
            },
            {
              "name": "DB_APP_PASSWORD",
              "value": "[parameters('dbUserPassword')]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
        //"[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    }
  ]
}
